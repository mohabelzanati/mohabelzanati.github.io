{"ast":null,"code":"import i18n from\"i18next\";import{initReactI18next}from\"react-i18next\";import Backend from\"i18next-http-backend\";import LanguageDetector from\"i18next-browser-languagedetector\";import translationEN from\"./assets/en/translation.json\";import translationAR from\"./assets/ar/translation.json\";var fallbackLng=[\"en\"];var availableLanguages=[\"en\",\"ar\"];var resources={en:{translation:translationEN},ar:{translation:translationAR}};i18n.use(Backend)// load translations using http (default                                               public/assets/locals/en/translations)\n.use(LanguageDetector)// detect user language\n.use(initReactI18next)// pass the i18n instance to react-i18next.\n.init({resources:resources,fallbackLng:fallbackLng,// fallback language is english.\ndetection:{checkWhitelist:true// options for language detection\n},debug:false,whitelist:availableLanguages,interpolation:{escapeValue:false// no need for react. it escapes by default\n}});export default i18n;","map":{"version":3,"names":["i18n","initReactI18next","Backend","LanguageDetector","translationEN","translationAR","fallbackLng","availableLanguages","resources","en","translation","ar","use","init","detection","checkWhitelist","debug","whitelist","interpolation","escapeValue"],"sources":["/root/website/src/i18nextConf.js"],"sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport translationEN from \"./assets/en/translation.json\";\nimport translationAR from \"./assets/ar/translation.json\";\nconst fallbackLng = [\"en\"];\nconst availableLanguages = [\"en\", \"ar\"];\nconst resources = {\n  en: {\n    translation: translationEN,\n  },\n  ar: {\n    translation: translationAR,\n  },\n};\ni18n\n  .use(Backend) // load translations using http (default                                               public/assets/locals/en/translations)\n  .use(LanguageDetector) // detect user language\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\n  .init({\n    resources,\n    fallbackLng, // fallback language is english.\n\n    detection: {\n      checkWhitelist: true, // options for language detection\n    },\n\n    debug: false,\n\n    whitelist: availableLanguages,\n\n    interpolation: {\n      escapeValue: false, // no need for react. it escapes by default\n    },\n  });\n\nexport default i18n;\n"],"mappings":"AAAA,MAAOA,KAAP,KAAiB,SAAjB,CACA,OAASC,gBAAT,KAAiC,eAAjC,CACA,MAAOC,QAAP,KAAoB,sBAApB,CACA,MAAOC,iBAAP,KAA6B,kCAA7B,CACA,MAAOC,cAAP,KAA0B,8BAA1B,CACA,MAAOC,cAAP,KAA0B,8BAA1B,CACA,GAAMC,YAAW,CAAG,CAAC,IAAD,CAApB,CACA,GAAMC,mBAAkB,CAAG,CAAC,IAAD,CAAO,IAAP,CAA3B,CACA,GAAMC,UAAS,CAAG,CAChBC,EAAE,CAAE,CACFC,WAAW,CAAEN,aADX,CADY,CAIhBO,EAAE,CAAE,CACFD,WAAW,CAAEL,aADX,CAJY,CAAlB,CAQAL,IAAI,CACDY,GADH,CACOV,OADP,CACgB;AADhB,CAEGU,GAFH,CAEOT,gBAFP,CAEyB;AAFzB,CAGGS,GAHH,CAGOX,gBAHP,CAGyB;AAHzB,CAIGY,IAJH,CAIQ,CACJL,SAAS,CAATA,SADI,CAEJF,WAAW,CAAXA,WAFI,CAES;AAEbQ,SAAS,CAAE,CACTC,cAAc,CAAE,IAAM;AADb,CAJP,CAQJC,KAAK,CAAE,KARH,CAUJC,SAAS,CAAEV,kBAVP,CAYJW,aAAa,CAAE,CACbC,WAAW,CAAE,KAAO;AADP,CAZX,CAJR,EAqBA,cAAenB,KAAf"},"metadata":{},"sourceType":"module"}